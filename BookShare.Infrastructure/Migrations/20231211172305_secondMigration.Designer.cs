// <auto-generated />
using System;
using BookShare.Infrastructure.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShare.Infrastructure.Migrations
{
    [DbContext(typeof(BookShareContext))]
    [Migration("20231211172305_secondMigration")]
    partial class secondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookShare.Domain.Model.BookForSale", b =>
                {
                    b.Property<string>("BookForSaleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookCategory")
                        .HasColumnType("int");

                    b.Property<int?>("BookCondition")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookCreationId")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationLevel")
                        .HasColumnType("int")
                        .HasColumnName("Subject");

                    b.Property<byte?>("HarmfulContentCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListingType")
                        .HasColumnType("int");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("MarketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("money");

                    b.Property<int?>("Subject")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookForSaleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("BooksForSale", t =>
                        {
                            t.Property("Subject")
                                .HasColumnName("Subject1");
                        });

                    b.HasData(
                        new
                        {
                            BookForSaleId = "b946508d-6a67-4f2e-93b0-2f1d15cb482e\r\n",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2231),
                            BookDescription = "Comprehensive introduction to economic theories and principles.",
                            BookName = "An Introduction to Economics",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2247),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/qsTTbGv",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2245),
                            ListingType = 1,
                            MarketPrice = 8000.00m,
                            SellingPrice = 2000.00m
                        },
                        new
                        {
                            BookForSaleId = "f7c8e0ae-3fb7-4e49-a42d-59b40698665a",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2273),
                            BookDescription = "In-depth exploration of business concepts and strategies.",
                            BookName = "Business Studies",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2273),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/m45tnVm",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2273),
                            ListingType = 1,
                            MarketPrice = 9000.00m,
                            SellingPrice = 4000.00m
                        },
                        new
                        {
                            BookForSaleId = "9b03f725-521f-4a90-9f4a-7c5b89c2465c",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2278),
                            BookDescription = "An engaging collection of literary masterpieces.",
                            BookName = "Literature",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2278),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/WVzW49p",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2278),
                            ListingType = 1,
                            MarketPrice = 2499.99m,
                            SellingPrice = 1299.99m
                        },
                        new
                        {
                            BookForSaleId = "90a1eb50-5e54-41b2-b5b9-5d3d25f7e031",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2282),
                            BookDescription = "A beginner-friendly guide to computer programming.",
                            BookName = "Computer Programming for Beginners",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2283),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/Q6XsX4J",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2283),
                            ListingType = 1,
                            MarketPrice = 5999.99m,
                            SellingPrice = 2999.99m
                        },
                        new
                        {
                            BookForSaleId = "e40bb26b-6f9b-4a53-b8dd-0c1cfb9daee2",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2347),
                            BookDescription = "Exploring the rich tapestry of global historical events.",
                            BookName = "World History",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2348),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/ZhBXwtS",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2348),
                            ListingType = 1,
                            MarketPrice = 2999.99m,
                            SellingPrice = 1499.99m
                        },
                        new
                        {
                            BookForSaleId = "c93cf864-d273-44d2-98b3-b36138de7b9b",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2352),
                            BookDescription = "Practical insights and experiments in the field of chemistry.",
                            BookName = "Master Practical Chemistry",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2352),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/qDDskmB",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2352),
                            ListingType = 0,
                            MarketPrice = 3499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "1cfc1884-2aae-4ac1-97c5-27f408f140f3",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2357),
                            BookDescription = "Comprehensive physics guide for SSCE and UTME exams.",
                            BookName = "SSCE and UTME Physics",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2357),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/NTMt2Sv",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2357),
                            ListingType = 0,
                            MarketPrice = 3999.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "a39b8e55-7a88-4912-9d08-45b33c550a6e",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2361),
                            BookDescription = "In-depth study of organic chemistry principles and reactions.",
                            BookName = "Organic Chemistry",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2362),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/ncsvd1j",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2361),
                            ListingType = 0,
                            MarketPrice = 4499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "55f7d2a7-3b49-4e87-88c0-6c88e2a0e17c",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2365),
                            BookDescription = "Comprehensive guide to general mathematical concepts.",
                            BookName = "New General Mathematics",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2366),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/6RkfmFB",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2365),
                            ListingType = 0,
                            MarketPrice = 3999.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "d764f82c-e4e1-4e50-825e-54c8b8b8eeb1",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2369),
                            BookDescription = "Physics textbook designed for modern school curricula.",
                            BookName = "New School Physics",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2370),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/QFmGNjR",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2370),
                            ListingType = 0,
                            MarketPrice = 3499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "f1af480b-44a0-48d1-a20d-d2e1b3bd46d4",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2373),
                            BookDescription = "Embark on a riveting journey through the intricate interplay of democracy and education, where societal ideals clash and harmonize.",
                            BookName = "Democracy and Education",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2374),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/7Vb2yM0",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2374),
                            ListingType = 1,
                            MarketPrice = 8000.00m,
                            SellingPrice = 2000.00m
                        },
                        new
                        {
                            BookForSaleId = "418f2b38-ae9e-49a8-9a8d-2ee99c8355cc",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2377),
                            BookDescription = "A heartwarming novel that unfolds the transformative impact of a dedicated teacher on the lives of students, inspiring them to overcome challenges and achieve greatness.",
                            BookName = "Because of a Teacher",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2378),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/NTWqctd",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2378),
                            ListingType = 1,
                            MarketPrice = 9000.00m,
                            SellingPrice = 4000.00m
                        },
                        new
                        {
                            BookForSaleId = "a5454a2a-6e34-4a35-8e54-8789ee849c4b",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2383),
                            BookDescription = "Immerse yourself in a captivating tale that explores the birth of innovators, tracing their journeys through challenges, creativity, and the relentless pursuit of groundbreaking ideas.",
                            BookName = "Creating Innovators",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2384),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/PQTcDJv",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2384),
                            ListingType = 1,
                            MarketPrice = 2499.99m,
                            SellingPrice = 1299.99m
                        },
                        new
                        {
                            BookForSaleId = "64a4c5a1-7782-4b4e-90b2-704dcd9d8d24",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2388),
                            BookDescription = "Experience the gripping narrative of a group of stranded boys on a deserted island, as they grapple with power dynamics, morality, and the primal instincts that emerge in their struggle for survival.",
                            BookName = "Lord of the Flies",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2388),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/NTPFxRr",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2388),
                            ListingType = 1,
                            MarketPrice = 5999.99m,
                            SellingPrice = 2999.99m
                        },
                        new
                        {
                            BookForSaleId = "2f19959b-458f-42f8-927d-45ad1d66a2d8",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2392),
                            BookDescription = "Step into the intriguing world of education, where societal norms and disparities come to light, shaping the experiences of learners from different walks of life.",
                            BookName = "How the Other Half Learns",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2393),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/mvpjYLb",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2393),
                            ListingType = 1,
                            MarketPrice = 2999.99m,
                            SellingPrice = 1499.99m
                        },
                        new
                        {
                            BookForSaleId = "878a3464-58b1-49b4-bdc3-ea201b6ac6ae",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2396),
                            BookDescription = "Embark on a literary journey that explores the intricacies of personal and academic growth, as characters navigate the challenges of self-discovery within the realm of education.",
                            BookName = "My Education",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2397),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/TgzzWF3",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2397),
                            ListingType = 0,
                            MarketPrice = 3499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "3b1cc8f3-69e2-4ec0-8522-2c4e01b529c2",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2400),
                            BookDescription = "Dive into a thought-provoking narrative that envisions the future of education, its transformative power, and the impact it leaves on the last generation of graduates in a changing world.",
                            BookName = "The Last Graduate",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2401),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/tKhXZVh",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2401),
                            ListingType = 0,
                            MarketPrice = 3999.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "aa12e4eb-40a8-4cd8-837d-3dd207f56b97",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2404),
                            BookDescription = "Experience the enchanting tale of a journey through science and technology, where small yet impactful teaching methods lead to profound discoveries and innovations.",
                            BookName = "Small Teaching",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2405),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/1XQJC2M",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2405),
                            ListingType = 0,
                            MarketPrice = 4499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "1a4ee5f0-0eab-4fe5-97e3-b0485c17384a",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2409),
                            BookDescription = "Embark on a captivating exploration of general educational studies, where the ladder to success is built with knowledge, insights, and a comprehensive understanding of key concepts.",
                            BookName = "Laddering Your Success",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2410),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/NZstpRt",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2409),
                            ListingType = 0,
                            MarketPrice = 3999.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "b79b1c76-1fb0-4a44-a758-0b6e524f245b",
                            BookCategory = 1,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2413),
                            BookDescription = "Delve into the enthralling narrative of academic disciplines intersecting within the realm of education, symbolized by the reflective 'Mirror' and the illuminating 'Lamp' guiding the way.",
                            BookName = "The Mirror and the Lamp",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2414),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/vz6pGWg",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2413),
                            ListingType = 0,
                            MarketPrice = 3499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "d0cde2d1-e9f7-4b1a-8a84-04ee55fb4a7e",
                            BookCategory = 2,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2419),
                            BookDescription = "A collection of short articles designed to enhance reading comprehension skills.",
                            BookName = "Short Articles for Reading Comprehension",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2420),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/x35LZ3s",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2419),
                            ListingType = 1,
                            MarketPrice = 8000.00m,
                            SellingPrice = 2000.00m
                        },
                        new
                        {
                            BookForSaleId = "4f33e4a3-2cb2-4ef9-9839-862fc58f64cd",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2453),
                            BookDescription = "Understanding business concepts and strategies for enhancing international student employability.",
                            BookName = "International Student Employability",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2454),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/s2pTv7W",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2453),
                            ListingType = 1,
                            MarketPrice = 9000.00m,
                            SellingPrice = 4000.00m
                        },
                        new
                        {
                            BookForSaleId = "7e4ed35f-e1a5-4a2a-baad-b6a6a2a8b5bb",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2458),
                            BookDescription = "An insightful journal exploring the intersection of business and education.",
                            BookName = "Business Education Journal",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2459),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/wKk93Fq",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2458),
                            ListingType = 1,
                            MarketPrice = 2499.99m,
                            SellingPrice = 1299.99m
                        },
                        new
                        {
                            BookForSaleId = "f78b929f-71cc-4fb2-b0d8-3188194c73f3",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2463),
                            BookDescription = "A guide to navigating online teaching and learning challenges during the Covid-19 pandemic.",
                            BookName = "Online Teaching and Learning in Higher Education during Covid-19",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2463),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/N97d49F",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2463),
                            ListingType = 1,
                            MarketPrice = 5999.99m,
                            SellingPrice = 2999.99m
                        },
                        new
                        {
                            BookForSaleId = "4b2c2c2c-3888-4214-9a3a-fa3075b9a373",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2467),
                            BookDescription = "Exploring the profound impact of global historical events on society.",
                            BookName = "Impact",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2468),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/WvtS13k",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2467),
                            ListingType = 1,
                            MarketPrice = 2999.99m,
                            SellingPrice = 1499.99m
                        },
                        new
                        {
                            BookForSaleId = "e4d9c0b1-7c6c-4eb1-9f5d-7c0195d2bf88",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2472),
                            BookDescription = "Mastering essential words to enhance vocabulary and language skills.",
                            BookName = "504 Absolutely Essential Words",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2472),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/PFMYxSn",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2472),
                            ListingType = 0,
                            MarketPrice = 3499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "0f8b75ef-5795-4f04-843a-7feae7661f01",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2476),
                            BookDescription = "Exploring innovative approaches to development in various fields.",
                            BookName = "Journal of Development and Innovation",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2477),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/Z6zLqwD",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2476),
                            ListingType = 0,
                            MarketPrice = 3999.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "5f68d2e2-7ce6-4310-bd29-9a46e5b60949",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2480),
                            BookDescription = "In-depth study of science and technology principles.",
                            BookName = "Research in Science and Technological Education",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2481),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/DWT5wQm",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2481),
                            ListingType = 0,
                            MarketPrice = 4499.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "6e6de32d-0682-4f5a-96d4-96c2f77f8f98",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2487),
                            BookDescription = "Comprehensive guide to general educational studies and their concepts.",
                            BookName = "Educational Studies",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2487),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/8YQLsfx",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2487),
                            ListingType = 0,
                            MarketPrice = 3999.99m,
                            SellingPrice = 0.00m
                        },
                        new
                        {
                            BookForSaleId = "c45330b1-d6b3-4a7a-8f92-4f33a11b3195",
                            BookCategory = 0,
                            BookCreationId = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2492),
                            BookDescription = "Explore the dynamic intersection of various academic disciplines within the realm of education.",
                            BookName = "Journal of Interdisciplinary Studies in Education",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(2492),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://ibb.co/SmJkzYp",
                            IsDeleted = false,
                            ListedDate = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Local).AddTicks(2492),
                            ListingType = 0,
                            MarketPrice = 3499.99m,
                            SellingPrice = 0.00m
                        });
                });

            modelBuilder.Entity("BookShare.Domain.Model.Delivery", b =>
                {
                    b.Property<string>("DeliveryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookForSaleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("money");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransporterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("BookForSaleId")
                        .IsUnique();

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("TransporterId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("BookShare.Domain.Model.KYC", b =>
                {
                    b.Property<string>("KycId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateIssued")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KycId");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPickUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Transporter", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("LocationId");

                    b.ToTable("Transporters");

                    b.HasData(
                        new
                        {
                            UserId = "25d73632-0715-40df-aec6-e4833dacdca6",
                            CompanyName = "Doretta and Company",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(5837),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 1,
                            IsDeleted = false,
                            LogoUrl = "https://cdn.dribbble.com/userupload/4706150/file/original-637a80baa0d74e38e81a889b589b4761.jpg",
                            PhoneNumber = "09044553323"
                        },
                        new
                        {
                            UserId = "b017365a-2f2d-463d-8707-66a9b590839a",
                            CompanyName = "On The Move Inc",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(5869),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 1,
                            IsDeleted = false,
                            LogoUrl = "https://cdn.dribbble.com/userupload/4706150/file/original-637a80baa0d74e38e81a889b589b4761.jpg",
                            PhoneNumber = "09056653323"
                        },
                        new
                        {
                            UserId = "e62dfff9-e41d-426c-acda-f0638d5d9d5b",
                            CompanyName = "On The Move Inc",
                            DateAdded = new DateTime(2023, 12, 11, 18, 23, 5, 365, DateTimeKind.Utc).AddTicks(5874),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 1,
                            IsDeleted = false,
                            LogoUrl = "https://cdn.dribbble.com/userupload/4706150/file/original-637a80baa0d74e38e81a889b589b4761.jpg",
                            PhoneNumber = "09056653323"
                        });
                });

            modelBuilder.Entity("BookShare.Domain.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("KycId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KycId")
                        .IsUnique()
                        .HasFilter("[KycId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "714b5c33-216f-4958-aa92-40ad9aa43912",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d03d911b-4a50-4692-b4f6-fbdd5e71e015",
                            Email = "ddunphie0@amazon.com",
                            EmailConfirmed = true,
                            FirstName = "Doretta",
                            ImageUrl = "https://thumbs.dreamstime.com/z/attractive-serious-african-american-lady-6620517.jpg",
                            IsVerified = false,
                            LastName = "Dunphie",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3916744b-7e66-443a-bb20-aeabb9f50021",
                            TwoFactorEnabled = false,
                            UserId = "25d73632-0715-40df-aec6-e4833dacdca6",
                            UserType = 2
                        },
                        new
                        {
                            Id = "0aa1e278-d70d-474d-b19a-5115a408551d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0ee281d-8ab2-464e-8315-79f7477ce85b",
                            Email = "cmounch1@behance.net",
                            EmailConfirmed = true,
                            FirstName = "Chane",
                            ImageUrl = "https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg",
                            IsVerified = false,
                            LastName = "Mounch",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "914624ea-13e1-4db9-80f1-e3ca598f3acf",
                            TwoFactorEnabled = false,
                            UserId = "b017365a-2f2d-463d-8707-66a9b590839a",
                            UserType = 2
                        },
                        new
                        {
                            Id = "deb89161-642b-4348-9982-1943ce0afef5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a9e0af8-2eb4-4000-ad19-b5e4bbad0e37",
                            Email = "pwalesby2@addthis.com",
                            EmailConfirmed = true,
                            FirstName = "Pyotr",
                            ImageUrl = "https://thumbs.dreamstime.com/z/attractive-serious-african-american-lady-6620517.jpg",
                            IsVerified = false,
                            LastName = "Walesby",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d3fda26-10a8-4f90-b80e-a0af3682ce17",
                            TwoFactorEnabled = false,
                            UserId = "e62dfff9-e41d-426c-acda-f0638d5d9d5b",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dd74ae65-8750-4859-991f-a62517a700ba",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "18affb8b-20fa-4ad8-836d-c05d65049936",
                            Name = "Transporter",
                            NormalizedName = "TRANSPORTER"
                        },
                        new
                        {
                            Id = "417576b7-bf4e-4a6f-979d-bdf5ab0a8da9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookShare.Domain.Model.BookForSale", b =>
                {
                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("BookShare.Domain.Model.Request", null)
                        .WithMany("Books")
                        .HasForeignKey("RequestId");

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Delivery", b =>
                {
                    b.HasOne("BookShare.Domain.Model.BookForSale", "BookForSale")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "BookForSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Request", "Request")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Transporter", "Transporter")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "TransporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookForSale");

                    b.Navigation("Location");

                    b.Navigation("Request");

                    b.Navigation("Transporter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Request", b =>
                {
                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Transporter", b =>
                {
                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookShare.Domain.Model.User", b =>
                {
                    b.HasOne("BookShare.Domain.Model.KYC", "KYC")
                        .WithOne("User")
                        .HasForeignKey("BookShare.Domain.Model.User", "KycId");

                    b.Navigation("KYC");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShare.Domain.Model.KYC", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BookShare.Domain.Model.Request", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
