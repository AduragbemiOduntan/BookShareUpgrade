// <auto-generated />
using System;
using BookShare.Infrastructure.ApplicationContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShare.Infrastructure.Migrations
{
    [DbContext(typeof(BookShareContext))]
    partial class BookShareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookShare.Domain.Model.BookForSale", b =>
                {
                    b.Property<string>("BookForSaleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookCategory")
                        .HasColumnType("int");

                    b.Property<int>("BookCondition")
                        .HasColumnType("int");

                    b.Property<string>("BookDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int")
                        .HasColumnName("Subject");

                    b.Property<string>("HarmfulContentCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListingType")
                        .HasColumnType("int");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("MarketPrice")
                        .HasColumnType("money");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("money");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookForSaleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("BooksForSale", t =>
                        {
                            t.Property("Subject")
                                .HasColumnName("Subject1");
                        });

                    b.HasData(
                        new
                        {
                            BookForSaleId = "25a9cfcc-24c3-4fe4-83ef-6f82e8704b4e",
                            Author = "John Doe",
                            BookCategory = 0,
                            BookCondition = 3,
                            BookDescription = "Economics textbook",
                            BookName = "Introduction to Economics",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6689),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 3,
                            ISBN = "978-0-123-45678-9",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6709),
                            ListingType = 1,
                            MarketPrice = 29.99m,
                            SellingPrice = 19.99m,
                            Subject = 9
                        },
                        new
                        {
                            BookForSaleId = "8eb4f536-7680-4a77-9f84-3c6ac75c77d2",
                            Author = "Jane Smith",
                            BookCategory = 1,
                            BookCondition = 2,
                            BookDescription = "Macroeconomics textbook",
                            BookName = "Macroeconomics Explained",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6714),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 4,
                            ISBN = "978-0-987-65432-1",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6717),
                            ListingType = 0,
                            MarketPrice = 39.99m,
                            SellingPrice = 29.99m,
                            Subject = 9
                        },
                        new
                        {
                            BookForSaleId = "3fcd4fe1-d8b7-4f9a-8625-8c92c8317409",
                            Author = "John Doe",
                            BookCategory = 0,
                            BookCondition = 1,
                            BookDescription = "Physics textbook for beginners",
                            BookName = "Introduction to Physics",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6721),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 5,
                            ISBN = "978-1-234-56789-0",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6723),
                            ListingType = 1,
                            MarketPrice = 49.99m,
                            SellingPrice = 39.99m,
                            Subject = 5
                        },
                        new
                        {
                            BookForSaleId = "fd6726e7-0dbb-4e4c-bc29-4cd4c6e8ecf7",
                            Author = "Alice Johnson",
                            BookCategory = 4,
                            BookCondition = 3,
                            BookDescription = "Grammar guide for language learners",
                            BookName = "English Grammar Essentials",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6725),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 1,
                            ISBN = "978-2-345-67890-1",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6727),
                            ListingType = 1,
                            MarketPrice = 29.99m,
                            SellingPrice = 19.99m,
                            Subject = 3
                        },
                        new
                        {
                            BookForSaleId = "0bb6a6f4-d16a-4fbf-bf23-926b4987ff7a",
                            Author = "Robert Miller",
                            BookCategory = 1,
                            BookCondition = 2,
                            BookDescription = "Business studies textbook",
                            BookName = "Introduction to Business Studies",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6759),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 3,
                            ISBN = "978-3-456-78901-2",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6761),
                            ListingType = 1,
                            MarketPrice = 34.99m,
                            SellingPrice = 24.99m,
                            Subject = 10
                        },
                        new
                        {
                            BookForSaleId = "1b55e794-02ce-48c4-b2a1-49770e97c158",
                            Author = "Emily White",
                            BookCategory = 0,
                            BookCondition = 0,
                            BookDescription = "Introduction to chemistry",
                            BookName = "Chemistry Basics",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6764),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 0,
                            ISBN = "978-4-567-89012-3",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6767),
                            ListingType = 0,
                            MarketPrice = 27.99m,
                            SellingPrice = 17.99m,
                            Subject = 6
                        },
                        new
                        {
                            BookForSaleId = "6e7e78a5-2b1e-4a71-b1a2-5b35bf7e7c2c",
                            Author = "Michael Brown",
                            BookCategory = 3,
                            BookCondition = 1,
                            BookDescription = "Introduction to computer science",
                            BookName = "Computer Science Fundamentals",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6770),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 4,
                            ISBN = "978-5-678-90123-4",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6772),
                            ListingType = 0,
                            MarketPrice = 39.99m,
                            SellingPrice = 29.99m,
                            Subject = 11
                        },
                        new
                        {
                            BookForSaleId = "9a1d8c0a-b7c4-43aa-89a2-9109d77477db",
                            Author = "David Thompson",
                            BookCategory = 4,
                            BookCondition = 2,
                            BookDescription = "Exploring historical events",
                            BookName = "History Uncovered",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6776),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 5,
                            ISBN = "978-6-789-01234-5",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6777),
                            ListingType = 1,
                            MarketPrice = 44.99m,
                            SellingPrice = 34.99m,
                            Subject = 4
                        },
                        new
                        {
                            BookForSaleId = "b3268c1b-04d0-4d07-b393-853e228f5aaf",
                            Author = "Sophie Clark",
                            BookCategory = 0,
                            BookCondition = 1,
                            BookDescription = "Fun math problems for enthusiasts",
                            BookName = "Math Puzzles and Challenges",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6782),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 4,
                            ISBN = "978-7-890-12345-6",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6784),
                            ListingType = 0,
                            MarketPrice = 19.99m,
                            SellingPrice = 9.99m,
                            Subject = 0
                        },
                        new
                        {
                            BookForSaleId = "3b59a7f2-91a0-4991-bb2b-3ee5d779d15b",
                            Author = "Charlotte Williams",
                            BookCategory = 4,
                            BookCondition = 3,
                            BookDescription = "A compilation of classic literature",
                            BookName = "Literary Classics Collection",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6787),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 3,
                            ISBN = "978-8-901-23456-7",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6789),
                            ListingType = 1,
                            MarketPrice = 54.99m,
                            SellingPrice = 44.99m,
                            Subject = 13
                        },
                        new
                        {
                            BookForSaleId = "735bf9c0-947a-4b29-b3c4-0e8eab31c34b",
                            Author = "Daniel Turner",
                            BookCategory = 0,
                            BookCondition = 0,
                            BookDescription = "Fundamental concepts of physics",
                            BookName = "Physics for Beginners",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6792),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 0,
                            ISBN = "978-9-012-34567-8",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6793),
                            ListingType = 1,
                            MarketPrice = 29.99m,
                            SellingPrice = 19.99m,
                            Subject = 5
                        },
                        new
                        {
                            BookForSaleId = "7e6e1b1d-7d91-45d7-a9d4-0e953ab12c3a",
                            Author = "Olivia Davis",
                            BookCategory = 2,
                            BookCondition = 2,
                            BookDescription = "Discovering the world of art",
                            BookName = "Art Appreciation",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6797),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 1,
                            ISBN = "978-0-111-22222-2",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6798),
                            ListingType = 0,
                            MarketPrice = 34.99m,
                            SellingPrice = 24.99m,
                            Subject = 16
                        },
                        new
                        {
                            BookForSaleId = "5f1c6d9a-3e85-46b0-b7c4-1e7df41e084e",
                            Author = "Ryan Mitchell",
                            BookCategory = 1,
                            BookCondition = 1,
                            BookDescription = "Understanding ethical business practices",
                            BookName = "Business Ethics",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6802),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 5,
                            ISBN = "978-3-333-44444-4",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6803),
                            ListingType = 1,
                            MarketPrice = 39.99m,
                            SellingPrice = 29.99m,
                            Subject = 10
                        },
                        new
                        {
                            BookForSaleId = "8eaa6d2b-e4cc-4c48-9205-8ef9f2c2c5b8",
                            Author = "Emma Turner",
                            BookCategory = 0,
                            BookCondition = 2,
                            BookDescription = "Exploring the environment and ecosystems",
                            BookName = "Environmental Science",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6806),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 3,
                            ISBN = "978-5-555-66666-6",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6808),
                            ListingType = 0,
                            MarketPrice = 49.99m,
                            SellingPrice = 39.99m,
                            Subject = 1
                        },
                        new
                        {
                            BookForSaleId = "d450b2f3-4d20-4d22-8d4e-4e6ef3a429b3",
                            Author = "Sophia Johnson",
                            BookCategory = 4,
                            BookCondition = 3,
                            BookDescription = "Introduction to philosophical concepts",
                            BookName = "Philosophy Fundamentals",
                            DateAdded = new DateTime(2023, 12, 8, 8, 46, 39, 35, DateTimeKind.Utc).AddTicks(6811),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevel = 4,
                            ISBN = "978-6-666-77777-7",
                            IsDeleted = false,
                            IsSoldOut = false,
                            ListedDate = new DateTime(2023, 12, 8, 7, 46, 39, 35, DateTimeKind.Utc).AddTicks(6812),
                            ListingType = 1,
                            MarketPrice = 24.99m,
                            SellingPrice = 14.99m,
                            Subject = 2
                        });
                });

            modelBuilder.Entity("BookShare.Domain.Model.Delivery", b =>
                {
                    b.Property<string>("DeliveryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookForSaleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("money");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransporterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("BookForSaleId")
                        .IsUnique();

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("TransporterId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("BookShare.Domain.Model.KYC", b =>
                {
                    b.Property<string>("KycId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateIssued")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KycId");

                    b.ToTable("KYCs");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LGA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPickUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Transporter", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("LocationId");

                    b.ToTable("Transporters");
                });

            modelBuilder.Entity("BookShare.Domain.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("KycId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportId")
                        .HasColumnType("nvarchar(450)");


                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KycId")
                        .IsUnique()
                        .HasFilter("[KycId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b5f24013-6485-433b-a3fc-d9473b0f37b7",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "af4ae79c-ec81-429d-afb7-da9c235404be",
                            Name = "Transporter",
                            NormalizedName = "TRANSPORTER"
                        },
                        new
                        {
                            Id = "84c222a6-38a5-48a4-b366-ddc999da828d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookShare.Domain.Model.BookForSale", b =>
                {
                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("BookShare.Domain.Model.Request", null)
                        .WithMany("Books")
                        .HasForeignKey("RequestId");

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Delivery", b =>
                {
                    b.HasOne("BookShare.Domain.Model.BookForSale", "BookForSale")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "BookForSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Request", "Request")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Transporter", "Transporter")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "TransporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Delivery", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookForSale");

                    b.Navigation("Location");

                    b.Navigation("Request");

                    b.Navigation("Transporter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Request", b =>
                {
                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.Transporter", b =>
                {
                    b.HasOne("BookShare.Domain.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", "User")
                        .WithOne()
                        .HasForeignKey("BookShare.Domain.Model.Transporter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShare.Domain.Model.User", b =>
                {
                    b.HasOne("BookShare.Domain.Model.KYC", "KYC")
                        .WithOne("User")
                        .HasForeignKey("BookShare.Domain.Model.User", "KycId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.Transporter", "Transporter")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KYC");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookShare.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShare.Domain.Model.KYC", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BookShare.Domain.Model.Request", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
